function [] = generate_noisy_video_from_data( sim )
%
% this function take the data matrix generated by sim_video_diff_expt(),
% and make a video based on it.

% SIM_VIDEO_DIFF_EXPT simulates a bead diffusion experiment for a Newtonian fluid
%
% 3DFM function
% specific/modeling
% last modified 2013.09.08 (cribb)
%
% This function simulates a bead diffusion experiment for a Newtonian
% fluid.  
%
% [sim, out_struct] = sim_video_diff_expt(filename, in_struct)
%
% where "sim" is the outputted simulation data in the traditional
%             video_spot_tracker 'table' format (see load_video_tracking)
%             with the positions in pixel units.
%       "out_struct" is a copy of the inputted simulation complete with
%                    default vales that my not have been specified on the input
%                    parameter.
%       "filename" is the filename where the simulation will be saved 
%                  (uses evt_GUI 'evt' format).  If an empty set is passed to
%                  this parameter, i.e. [], then the simulation is not
%                  saved to disk.
%       "in_struct" is a structure that specifies the paramters for the
%                   simulation.  Its fields include:
%            in_struct.seed = seed value to give to random number generator.
%                             If this value is absent, the generator uses the 
%                             system time as the seed.
%            in_struct.numpaths = number of bead paths.  Default: 10.
%            in_struct.bead_radius = bead radius in [m].  Default: 0.5e-6.

%            in_struct.viscosity = solution viscosity in [Pa s].  Default: 0.023 (2 M sucrose).
%            in_struct.rad_confined = the particle's radius of confinement
%            in [m]. Default: Inf. <- what is this? 

%            in_struct.alpha = anomalous diffusion constant. Default: 1.
%            in_struct.modulus = modulus of the fluid [Pa]. Default: 2.2e9 (bulk modulus of water).
%            in_struct.frame_rate = frame rate of camera in [fps].  Default: 30.
%            in_struct.duration = duration of video in [s].  Default: 60.
%            in_struct.tempK = temperature of fluid in [K].  Default: 300.
%            in_struct.field_width = width of video frame in [px].  Default: 648.
%            in_struct.field_height = height of video frame in [px].  Default: 484.
%            in_struct.calib_um = conversion unit in [microns/pixel].  Default: 0.152.
%            in_struct.xdrift_vel = x-drift in [meters/frame].  Default: 0.
%            in_struct.ydrift_vel = y-drift in [meters/frame].  Default: 0.
%

% image size default: 648 * 484
% microns / pixel = 0.152
% bead radius = 0.5e-6
% bead raduis in pixel = 0.5e-6 = 0.5 micron = 3.28 pixels

h = 484;
w = 648;
bead_radius = 3;
n_of_frames = 1800;
n_of_beads = 10;

for i = 1:n_of_frames
    img = zeros(h,w);
    for k = 1:n_of_beads
        curr_row = sim(i+(k-1)*1800,:);
        bead_x = curr_row(4);
        bead_y = curr_row(5);
        for y = bead_y-bead_radius:bead_y+bead_radius
            
            yi = uint16(y);
            if yi > 0
                for x = bead_x-bead_radius:bead_x+bead_radius
                   xi = uint16(x);
                   if xi > 0
                       img(yi,xi) = 1;
                   end
                end
            end
        end
    end
    
    noiseG = imnoise(img,'gaussian');
    noiseP = imnoise(img,'poisson');
    
    pureP = int16(curr_img) - int16(noiseP);
    
    noiseGP = noiseG + pureP;
    
    
    imwrite(noiseGP,strcat('video_data/frame',sprintf('%04d',i),'.png'));
end
end
